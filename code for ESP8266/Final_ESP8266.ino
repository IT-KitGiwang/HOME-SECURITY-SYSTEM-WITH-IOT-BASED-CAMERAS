// Blynk c·∫•u h√¨nh
#define BLYNK_PRINT Serial
#define BLYNK_TEMPLATE_ID "TMPL6aWsElsZP"
#define BLYNK_TEMPLATE_NAME "esp32 live"
#define BLYNK_AUTH_TOKEN "jkFpybwtL1QHTrClJJo3QnI14s_CpGi8"

// Th∆∞ vi·ªán
#include <Servo.h>
#include <ESP8266WiFi.h>
#include <BlynkSimpleEsp8266.h>

// WiFi
char ssid[] = "tranquocgiang";
char pass[] = "12345678";

// Servo
Servo myservo; // SERVO CH√ÇN D5 - void setup() -> myservo.attach(14); 

// Ch√¢n k·∫øt n·ªëi
int camBienTu = 4;     // D2 - C·∫£m bi·∫øn t·ª´
int buzzerPin = 5;     // D1 - C√≤i buzzer
int camBienPIR = 12;   // D6 - C·∫£m bi·∫øn chuy·ªÉn ƒë·ªông PIR
int buttonDoor = 2;    // D4 - Button nh·∫•n c·ª≠a 
int ledSecurityMode = 13;// D7 - Led ch·∫ø ƒë·ªô gi√°m s√°t


// C√°c bi·∫øn x·ª≠ l√Ω PIR
int cheDoGiamSat = 0; // bi·∫øn ƒë·ªÉ ki·ªÉm tra b·∫≠t/t·∫Øt ch·∫ø ƒë·ªô PIR t·ª´ blynk 
int lastState = LOW; // Bi·∫øn tr·∫°ng th√°i nh·∫≠n di·ªán PIR, kh·ªüi t·∫°o = LOW (ch∆∞a nh·∫≠n di·ªán)

// C√°c bi·∫øn ƒë·ªÉ x·ª≠ l√≠ ƒë√≥ng / m·ªü c·ª≠a
long doorOpenStartTime = 0; //Th·ªùi gian b·∫Øt ƒë·∫ßu m·ªü c·ª≠a c·ªßa nh·ªØng l·∫ßn g·∫ßn nh·∫•t (Kh·ªüi t·∫°o = 0)
bool doorOpened = false; // Bi·∫øn ki·ªÉm tra c·ª≠a c√≥ m·ªü hay ko, kh·ªüi t·∫°o = false

// Gi·∫£m spam nh·∫≠n di·ªán PIR 
unsigned long lastStatus_PIR = 0; // Th·ªùi gian nh·∫≠n di·ªán g·∫ßn nh·∫•t, kh·ªüi t·∫°o = 0
const unsigned long printInterval_PIR = 100; // Th·ªùi gian gi√£n c√°ch gi·ªØa c√°c l·∫ßn nh·∫≠n di·ªán - 100ms

// Gi·∫£m spam chu√¥ng c·ª≠a (button v√† c√≤i buzz)
unsigned long lastNotifyTime_Buzz = 0; // L·∫ßn chu√¥ng k√™u g·∫ßn nh·∫•t, kh·ªüi t·∫°o b·∫±ng 0
const unsigned long notifyCooldown_Buzz = 10000; // Th·ªùi gian ch·ªù gi·ªØa c√°c l·∫ßn nh·∫≠n gi√° tr·ªã button v√† g·ª≠i th√¥ng b√°o chu√¥ng c·ª≠a - 10 gi√¢y

// Gi·∫£m SPAM TH√îNG B√ÅO BLYNK NOTICE KHI C·ª¨A M·ªû QU√Å 10S
unsigned long lastNotify_openDoor = 0; // th·ªùi gian c·ª≠a b·ªã m·ªü qu√° 10 gi√¢y g·∫ßn nh·∫•t
const unsigned long notifyInterval_openDoor = 5000; // th·ªùi gian delay g·ª≠i th√¥ng b√°o ƒë·∫øn BLYNK m·ªói l·∫ßn (5 gi√¢y)

void setup() {
  Serial.begin(9600);

  // K·∫øt n·ªëi WiFi v√† Blynk
  Blynk.begin(BLYNK_AUTH_TOKEN, ssid, pass);

  // C·∫•u h√¨nh ch√¢n
  myservo.attach(14);              // D5 - Servo
  myservo.write(180);               // ƒë√≥ng c·ª≠a ban ƒë·∫ßu
  pinMode(camBienTu, INPUT_PULLUP); // D2 - C·∫£m bi·∫øn t·ª´
  pinMode(buzzerPin, OUTPUT);      // D1 - Buzzer
  pinMode(camBienPIR, INPUT);      // D6 - PIR
  pinMode(ledSecurityMode, OUTPUT); // T·∫ÆT LED BAN ƒê·∫¶U
  pinMode(buttonDoor, INPUT_PULLUP); // ƒê·ªåC GI√Å TR·ªä BUTTON
  // ƒê·ª£i PIR ·ªïn ƒë·ªãnh
  Serial.println("Ch·ªù c·∫£m bi·∫øn PIR ·ªïn ƒë·ªãnh..."); 
  delay(5000); // 5s l√†m n√≥ng b·ªÅ m·∫∑t lƒÉng k√≠nh gi√∫p nh·∫≠n di·ªán ch√≠nh x√°c h∆°n
  Serial.println("C√ÅC C√ÄI ƒê·∫∂T ƒê√É XONG...");
}

// üëâ X·ª≠ l√Ω n√∫t m·ªü/ƒë√≥ng c·ª≠a t·ª´ Blynk (V2)
BLYNK_WRITE(V2) {
  int buttonState = param.asInt();
  if (buttonState == 1) {
    closeDoor();
    Serial.println("üü¢ ƒê√≥ng c·ª≠a t·ª´ Blynk (V2)");
  } else {
    openDoor();
    Serial.println("üî¥ M·ªü c·ª≠a t·ª´ Blynk (V2)");
  }
}
// üëâ B·∫≠t t·∫Øt ch·∫ø ƒë·ªô gi√°m s√°t t·ª´ BLynk (V1)
BLYNK_WRITE(V1) {
  int securityState = param.asInt();
  if (securityState == 1) {
    Serial.println("B·∫≠t ch·∫ø ƒë·ªô gi√°m s√°t");
    cheDoGiamSat = 1;
    digitalWrite(ledSecurityMode,HIGH);
  } else {
    Serial.println("t·∫Øt ch·∫ø ƒë·ªô gi√°m s√°t");
    cheDoGiamSat = 0;
    digitalWrite(ledSecurityMode,LOW);
  }
}

// üö™ M·ªü c·ª≠a
void openDoor() {
  Blynk.virtualWrite(V4, "C·ª≠a ngo√†i ƒëang m·ªü");
  for (int pos = 180; pos >= 0; pos--) {
    myservo.write(pos);
    delay(1);
  }
  
  doorOpened = true;
  doorOpenStartTime = millis();
}

// üö™ ƒê√≥ng c·ª≠a
void closeDoor() {
  Blynk.virtualWrite(V4, "C·ª≠a ngo√†i ƒëang ƒë√≥ng");
  for (int pos = 0; pos <= 180; pos++) {
    myservo.write(pos);
    delay(1);
  }
  doorOpened = false;
}

//  X·ª≠ l√Ω an ninh c·ª≠a b·∫±ng c·∫£m bi·∫øn t·ª´, g·ª≠i th√¥ng b√°o n·∫øu c·ª≠a m·ªü qu√° 10 gi√¢y
void SecurityOutDoor() {
  int currentState = digitalRead(camBienTu);

  if (currentState == HIGH) {
    if (!doorOpened) {
      doorOpenStartTime = millis();
      doorOpened = true;
      Serial.println("üö™ C·ª≠a m·ªü!");
    }
  } else {
    doorOpened = false;
  }
  // N·∫øu c·ª≠a m·ªü qu√° 10 gi√¢y
  if (doorOpened && (millis() - doorOpenStartTime > 10000)) { // 10000 = 10 gi√¢y
    if (millis() - lastNotify_openDoor >= notifyInterval_openDoor) {
      digitalWrite(buzzerPin, HIGH);
      delay(500);
      digitalWrite(buzzerPin, LOW);
      Blynk.logEvent("doornotice", "C·ª≠a m·ªü qu√° 10 gi√¢y");
      Serial.println("üö® C·ª≠a ƒë√£ m·ªü qu√° 10 gi√¢y!");
      lastNotify_openDoor = millis(); // c·∫≠p nh·∫≠t th·ªùi gian g·ª≠i g·∫ßn nh·∫•t
    }
  } else {
    digitalWrite(buzzerPin, LOW);
    lastNotify_openDoor = 0; // reset ƒë·ªÉ l·∫ßn sau g·ª≠i l·∫°i sau 5s
  }
}

// üëÄ X·ª≠ l√Ω c·∫£m bi·∫øn PIR tr∆∞·ªùng h·ª£p khi c·∫£ nh√† ƒëi v·∫Øng, d√πng ƒë·ªÉ nh·∫≠n di·ªán c√≥ tr·ªôm ƒë·ªôt nh·∫≠p.
void checkPIR(){
  int currentState = digitalRead(camBienPIR); // ƒê·ªçc tr·∫°ng th√°i c·∫£m bi·∫øn PIR

    // Ki·ªÉm tra n·∫øu c√≥ s·ª± thay ƒë·ªïi tr·∫°ng th√°i v√† kho·∫£ng th·ªùi gian ƒë·ªß l√¢u tr√°nh spam
    if (cheDoGiamSat && currentState != lastState && (millis() - lastStatus_PIR) > printInterval_PIR) {
      // In tr·∫°ng th√°i c·ªßa c·∫£m bi·∫øn khi c√≥ s·ª± thay ƒë·ªïi
      if (currentState == HIGH) {
        Blynk.logEvent("warning", "C·∫£nh b√°o c√≥ tr·ªôm ƒë·ªôt nh·∫≠p !");
        Serial.println("üîï C√≥ tr·ªôm ƒë·ªôt nh·∫≠p.");
      } else {
        Serial.println("üîï Kh√¥ng c√≤n chuy·ªÉn ƒë·ªông.");
      }
      // C·∫≠p nh·∫≠t tr·∫°ng th√°i v√† th·ªùi gian in l·∫ßn cu·ªëi
      lastState = currentState;
      lastStatus_PIR = millis();
    }
}
// h√†m g·ª≠i th√¥ng b√°o t·ªõi blynk khi c√≥ kh√°ch ·∫•n chu√¥ng c·ª≠a
void guest(){ 
  bool lastButtonState = HIGH;
  bool currentButtonState = digitalRead(buttonDoor);

  // Ph√°t hi·ªán nh·∫•n m·ªõi (nh·∫•n t·ª´ HIGH sang LOW)
  if (lastButtonState == HIGH && currentButtonState == LOW) {
    unsigned long currentTime = millis();
    if (currentTime - lastNotifyTime_Buzz >= notifyCooldown_Buzz) {
      digitalWrite(buzzerPin, HIGH);
      Blynk.logEvent("guest", "C√≥ ng∆∞·ªùi nh·∫•n chu√¥ng c·ªïng !");
      Serial.println("C√≥ ng∆∞·ªùi nh·∫•n chu√¥ng c·ªïng !");
      delay(500);
      digitalWrite(buzzerPin, LOW);
      lastNotifyTime_Buzz = currentTime; // c·∫≠p nh·∫≠t th·ªùi gian l·∫ßn cu·ªëi ƒë·ªçc gi√° tr·ªã button v√† ph√°t c√≤i buzz
    }
  }
  lastButtonState = currentButtonState; // tr·∫°ng th√°i g·∫ßn nh·∫•t c·ªßa button
}
void loop() {
  Blynk.run();
  SecurityOutDoor(); // G·ªçi ki·ªÉm tra c·∫£m bi·∫øn t·ª´
  checkPIR();
  guest();

}
